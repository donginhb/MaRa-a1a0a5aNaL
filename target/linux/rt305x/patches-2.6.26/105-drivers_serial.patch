--- old/drivers/serial/8250.c	2007-04-26 11:08:32.000000000 +0800
+++ new/drivers/serial/8250.c	2008-10-24 14:20:13.000000000 +0800
@@ -379,9 +379,14 @@
 			return (tmp >> 16) & 0xff; /* UART_IIR % 4 == 2 */
 		} else
 			return readb(up->port.membase + offset);
-
 	default:
+#if defined (CONFIG_RALINK_RT2880) || \
+        defined (CONFIG_RALINK_RT2883) || \
+        defined (CONFIG_RALINK_RT3052)
+           return (*(int*)(up->port.iobase + offset));
+#else
 		return inb(up->port.iobase + offset);
+#endif
 	}
 }
 
@@ -430,7 +435,13 @@
 		break;
 
 	default:
+#if defined (CONFIG_RALINK_RT2880) || \
+        defined (CONFIG_RALINK_RT2883) || \
+        defined (CONFIG_RALINK_RT3052)
+           *(int*)(up->port.iobase + offset) = value;
+#else
 		outb(value, up->port.iobase + offset);
+#endif
 	}
 }
 
@@ -474,7 +485,20 @@
 	serial_outp(up, UART_DLM, value >> 8 & 0xff);
 }
 
-#if defined(CONFIG_SERIAL_8250_AU1X00)
+#if defined (CONFIG_RALINK_RT2880) || \
+    defined (CONFIG_RALINK_RT2883) || \
+    defined (CONFIG_RALINK_RT3052)
+/* Ralink haven't got a standard divisor latch */
+static int serial_dl_read(struct uart_8250_port *up)
+{   
+    return serial_inp(up, UART_DLL);
+}
+
+static void serial_dl_write(struct uart_8250_port *up, int value)
+{   
+    serial_outp(up, UART_DLL, value);
+}
+#elif defined(CONFIG_SERIAL_8250_AU1X00)
 /* Au1x00 haven't got a standard divisor latch */
 static int serial_dl_read(struct uart_8250_port *up)
 {
@@ -684,9 +708,21 @@
 {
 	unsigned char old_dll, old_dlm, old_lcr;
 	unsigned int id;
+#if defined (CONFIG_RALINK_RT2880) || \
+    defined (CONFIG_RALINK_RT2883) || \
+    defined (CONFIG_RALINK_RT3052)
+	unsigned short old_dl;
+
+	old_dl = serial_dl_read(p);
+	serial_dl_write(p, 0);
+	id = serial_dl_read(p);
+	serial_dl_write(p, old_dl);
 
 	old_lcr = serial_inp(p, UART_LCR);
 	serial_outp(p, UART_LCR, UART_LCR_DLAB);
+#else
+	old_lcr = serial_inp(p, UART_LCR);
+	serial_outp(p, UART_LCR, UART_LCR_DLAB);
 
 	old_dll = serial_inp(p, UART_DLL);
 	old_dlm = serial_inp(p, UART_DLM);
@@ -698,6 +734,7 @@
 
 	serial_outp(p, UART_DLL, old_dll);
 	serial_outp(p, UART_DLM, old_dlm);
+#endif
 	serial_outp(p, UART_LCR, old_lcr);
 
 	return id;
diff -Nur old/drivers/serial/8250_early.c new/drivers/serial/8250_early.c
--- old/drivers/serial/8250_early.c	2007-04-26 11:08:32.000000000 +0800
+++ new/drivers/serial/8250_early.c	2008-10-24 14:20:13.000000000 +0800
@@ -103,11 +103,21 @@
 
 	lcr = serial_in(port, UART_LCR);
 	serial_out(port, UART_LCR, lcr | UART_LCR_DLAB);
+#if defined (CONFIG_RALINK_RT2880) || \
+    defined (CONFIG_RALINK_RT2883) || \
+    defined (CONFIG_RALINK_RT3052)
+	quot= serial_in(port, UART_DLL);
+#else
 	dll = serial_in(port, UART_DLL);
 	dlm = serial_in(port, UART_DLM);
+#endif
 	serial_out(port, UART_LCR, lcr);
 
+#if defined (CONFIG_RALINK_RT2880) || \
+    defined (CONFIG_RALINK_RT2883) || \
+    defined (CONFIG_RALINK_RT3052)
 	quot = (dlm << 8) | dll;
+#endif
 	return (port->uartclk / 16) / quot;
 }
 
diff -Nur old/drivers/serial/serial_core.c new/drivers/serial/serial_core.c
--- old/drivers/serial/serial_core.c	2007-04-26 11:08:32.000000000 +0800
+++ new/drivers/serial/serial_core.c	2008-10-24 14:20:13.000000000 +0800
@@ -414,6 +414,11 @@
 		quot = port->custom_divisor;
 	else
 		quot = (port->uartclk + (8 * baud)) / (16 * baud);
+#if defined (CONFIG_RALINK_RT2880) || \
+	defined (CONFIG_RALINK_RT2883) || \
+	defined (CONFIG_RALINK_RT3052)
+	quot = port->custom_divisor;
+#endif
 
 	return quot;
 }
diff -Nur linux_2.6.21/include/linux/serial.h /home/ckjwang/work/RT288x_SDK/source/linux-2.6.21.x/include/linux/serial.h
--- linux_2.6.21/include/linux/serial.h	2007-04-26 11:08:32.000000000 +0800
+++ /home/ckjwang/work/RT288x_SDK/source/linux-2.6.21.x/include/linux/serial.h	2008-10-24 14:20:14.000000000 +0800
@@ -76,7 +76,8 @@
 #define PORT_16654	11
 #define PORT_16850	12
 #define PORT_RSA	13	/* RSA-DV II/S card */
-#define PORT_MAX	13
+#define PORT_SB1250	14
+#define PORT_MAX	14
 
 #define SERIAL_IO_PORT	0
 #define SERIAL_IO_HUB6	1
diff -Nur linux_2.6.21/include/linux/serialP.h /home/ckjwang/work/RT288x_SDK/source/linux-2.6.21.x/include/linux/serialP.h
--- linux_2.6.21/include/linux/serialP.h	2007-04-26 11:08:32.000000000 +0800
+++ /home/ckjwang/work/RT288x_SDK/source/linux-2.6.21.x/include/linux/serialP.h	2008-10-24 14:20:14.000000000 +0800
@@ -24,6 +24,7 @@
 #include <linux/interrupt.h>
 #include <linux/circ_buf.h>
 #include <linux/wait.h>
+#include <linux/serial.h>
 
 struct serial_state {
 	int	magic;
diff -Nur linux_2.6.21/include/linux/serial_reg.h /home/ckjwang/work/RT288x_SDK/source/linux-2.6.21.x/include/linux/serial_reg.h
--- linux_2.6.21/include/linux/serial_reg.h	2007-04-26 11:08:32.000000000 +0800
+++ /home/ckjwang/work/RT288x_SDK/source/linux-2.6.21.x/include/linux/serial_reg.h	2008-10-24 14:20:14.000000000 +0800
@@ -14,13 +14,67 @@
 #ifndef _LINUX_SERIAL_REG_H
 #define _LINUX_SERIAL_REG_H
 
-/*
- * DLAB=0
+#if defined (CONFIG_RALINK_RT2880) || defined (CONFIG_RALINK_RT3052) || defined (CONFIG_RALINK_RT2883)
+
+#define UART_RX		0	/* In:  Receive buffer (DLAB=0) */
+
+#define UART_TX		1	/* Out: Transmit buffer (DLAB=0) */
+#define UART_TRG	1	/* (LCR=BF) FCTR bit 7 selects Rx or Tx
+				 * In: Fifo count
+				 * Out: Fifo custom trigger levels
+				 * XR16C85x only
+				 */
+
+#define UART_IER	2	/* Out: Interrupt Enable Register */
+#define UART_FCTR	2	/* (LCR=BF) Feature Control Register
+				 * XR16C85x only
+				 */
+
+#define UART_IIR	3	/* In:  Interrupt ID Register */
+#define UART_EFR	3	/* I/O: Extended Features Register */
+				/* (DLAB=1, 16C660 only) */
+
+#define UART_FCR	4 	/* Out: FIFO Control Register */
+#define UART_LCR	5	/* Out: Line Control Register */
+#define UART_MCR	6	/* Out: Modem Control Register */
+#define UART_LSR	7	/* In:  Line Status Register */
+#define UART_MSR	8	/* In:  Modem Status Register */
+#define UART_SCR	9	/* I/O: Scratch Register */
+#define UART_DLL	10	/* Out: Divisor Latch Low (DLAB=1) */
+/* Since surfboard uart cannot be accessed by byte, using UART_DLM will cause
+ * unpredictable values to be written to the Divisor Latch
  */
+#define UART_DLM	11	/* Out: Divisor Latch High (DLAB=1) */
+
+#else
+
 #define UART_RX		0	/* In:  Receive buffer */
 #define UART_TX		0	/* Out: Transmit buffer */
+#define UART_DLL	0	/* Out: Divisor Latch Low */
+#define UART_TRG	0	/* FCTR bit 7 selects Rx or Tx
+				 * In: Fifo count
+				 * Out: Fifo custom trigger levels */
 
+#define UART_DLM	1	/* Out: Divisor Latch High */
 #define UART_IER	1	/* Out: Interrupt Enable Register */
+#define UART_FCTR	1	/* Feature Control Register */
+
+#define UART_IIR	2	/* In:  Interrupt ID Register */
+#define UART_FCR	2	/* Out: FIFO Control Register */
+#define UART_EFR	2	/* I/O: Extended Features Register */
+
+#define UART_LCR	3	/* Out: Line Control Register */
+#define UART_MCR	4	/* Out: Modem Control Register */
+#define UART_LSR	5	/* In:  Line Status Register */
+#define UART_MSR	6	/* In:  Modem Status Register */
+#define UART_SCR	7	/* I/O: Scratch Register */
+#define UART_EMSR	7	/* Extended Mode Select Register */
+
+#endif
+/*
+ * DLAB=0
+ */
+//#define UART_IER	1	/* Out: Interrupt Enable Register */
 #define UART_IER_MSI		0x08 /* Enable Modem status interrupt */
 #define UART_IER_RLSI		0x04 /* Enable receiver line status interrupt */
 #define UART_IER_THRI		0x02 /* Enable Transmitter holding register int. */
@@ -30,7 +84,7 @@
  */
 #define UART_IERX_SLEEP		0x10 /* Enable sleep mode */
 
-#define UART_IIR	2	/* In:  Interrupt ID Register */
+//#define UART_IIR	2	/* In:  Interrupt ID Register */
 #define UART_IIR_NO_INT		0x01 /* No interrupts pending */
 #define UART_IIR_ID		0x06 /* Mask for the interrupt ID */
 #define UART_IIR_MSI		0x00 /* Modem status interrupt */
@@ -38,7 +92,7 @@
 #define UART_IIR_RDI		0x04 /* Receiver data interrupt */
 #define UART_IIR_RLSI		0x06 /* Receiver line status interrupt */
 
-#define UART_FCR	2	/* Out: FIFO Control Register */
+//#define UART_FCR	2	/* Out: FIFO Control Register */
 #define UART_FCR_ENABLE_FIFO	0x01 /* Enable the FIFO */
 #define UART_FCR_CLEAR_RCVR	0x02 /* Clear the RCVR FIFO */
 #define UART_FCR_CLEAR_XMIT	0x04 /* Clear the XMIT FIFO */
@@ -81,7 +135,7 @@
 #define UART_FCR6_T_TRIGGER_30	0x30 /* Mask for transmit trigger set at 30 */
 #define UART_FCR7_64BYTE	0x20 /* Go into 64 byte mode (TI16C750) */
 
-#define UART_LCR	3	/* Out: Line Control Register */
+//#define UART_LCR	3	/* Out: Line Control Register */
 /*
  * Note: if the word length is 5 bits (UART_LCR_WLEN5), then setting 
  * UART_LCR_STOP will select 1.5 stop bits, not 2 stop bits.
@@ -97,7 +151,7 @@
 #define UART_LCR_WLEN7		0x02 /* Wordlength: 7 bits */
 #define UART_LCR_WLEN8		0x03 /* Wordlength: 8 bits */
 
-#define UART_MCR	4	/* Out: Modem Control Register */
+//#define UART_MCR	4	/* Out: Modem Control Register */
 #define UART_MCR_CLKSEL		0x80 /* Divide clock by 4 (TI16C752, EFR[4]=1) */
 #define UART_MCR_TCRTLR		0x40 /* Access TCR/TLR (TI16C752, EFR[4]=1) */
 #define UART_MCR_XONANY		0x20 /* Enable Xon Any (TI16C752, EFR[4]=1) */
@@ -108,7 +162,7 @@
 #define UART_MCR_RTS		0x02 /* RTS complement */
 #define UART_MCR_DTR		0x01 /* DTR complement */
 
-#define UART_LSR	5	/* In:  Line Status Register */
+//#define UART_LSR	5	/* In:  Line Status Register */
 #define UART_LSR_TEMT		0x40 /* Transmitter empty */
 #define UART_LSR_THRE		0x20 /* Transmit-hold-register empty */
 #define UART_LSR_BI		0x10 /* Break interrupt indicator */
@@ -117,7 +171,7 @@
 #define UART_LSR_OE		0x02 /* Overrun error indicator */
 #define UART_LSR_DR		0x01 /* Receiver data ready */
 
-#define UART_MSR	6	/* In:  Modem Status Register */
+//#define UART_MSR	6	/* In:  Modem Status Register */
 #define UART_MSR_DCD		0x80 /* Data Carrier Detect */
 #define UART_MSR_RI		0x40 /* Ring Indicator */
 #define UART_MSR_DSR		0x20 /* Data Set Ready */
@@ -128,18 +182,18 @@
 #define UART_MSR_DCTS		0x01 /* Delta CTS */
 #define UART_MSR_ANY_DELTA	0x0F /* Any of the delta bits! */
 
-#define UART_SCR	7	/* I/O: Scratch Register */
+//#define UART_SCR	7	/* I/O: Scratch Register */
 
 /*
  * DLAB=1
  */
-#define UART_DLL	0	/* Out: Divisor Latch Low */
-#define UART_DLM	1	/* Out: Divisor Latch High */
+//#define UART_DLL	0	/* Out: Divisor Latch Low */
+//#define UART_DLM	1	/* Out: Divisor Latch High */
 
 /*
  * LCR=0xBF (or DLAB=1 for 16C660)
  */
-#define UART_EFR	2	/* I/O: Extended Features Register */
+//#define UART_EFR	2	/* I/O: Extended Features Register */
 #define UART_EFR_CTS		0x80 /* CTS flow control */
 #define UART_EFR_RTS		0x40 /* RTS flow control */
 #define UART_EFR_SCD		0x20 /* Special character detect */
@@ -165,9 +219,9 @@
 /*
  * LCR=0xBF, XR16C85x
  */
-#define UART_TRG	0	/* FCTR bit 7 selects Rx or Tx
-				 * In: Fifo count
-				 * Out: Fifo custom trigger levels */
+//#define UART_TRG	0	/* FCTR bit 7 selects Rx or Tx
+//				 * In: Fifo count
+//				 * Out: Fifo custom trigger levels */
 /*
  * These are the definitions for the Programmable Trigger Register
  */
@@ -181,7 +235,7 @@
 #define UART_TRG_120		0x78
 #define UART_TRG_128		0x80
 
-#define UART_FCTR	1	/* Feature Control Register */
+//#define UART_FCTR	1	/* Feature Control Register */
 #define UART_FCTR_RTS_NODELAY	0x00  /* RTS flow control delay */
 #define UART_FCTR_RTS_4DELAY	0x01
 #define UART_FCTR_RTS_6DELAY	0x02
@@ -199,7 +253,7 @@
 /*
  * LCR=0xBF, FCTR[6]=1
  */
-#define UART_EMSR	7	/* Extended Mode Select Register */
+//#define UART_EMSR	7	/* Extended Mode Select Register */
 #define UART_EMSR_FIFO_COUNT	0x01  /* Rx/Tx select */
 #define UART_EMSR_ALT_COUNT	0x02  /* Alternating count select */
 
